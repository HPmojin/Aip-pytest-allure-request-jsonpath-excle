{"uid":"5af61697b095aadb","name":"根据 ID 查询商品","fullName":"test_caes.test_001.Test#test_001","historyId":"9347219076fd0d53d7f9f75430126c4b","time":{"start":1663743364415,"stop":1663743364446,"duration":31},"status":"failed","statusMessage":"AssertionError: assert False\n +  where False = <bound method AssertApi.assert_api of <common.assert_api.AssertApi object at 0x000001198F3B0EE0>>({'data': {'add_time': 1663732454, 'attrs': [{'add_price': None, 'attr_id': 15, 'attr_name': '主观参数-品牌', 'attr_sel': 'only', ...}, {'add_price': None, 'attr_id': 15, 'attr_name': '主观参数-品牌', 'attr_sel': 'only', ...}], 'cat_id': 3, 'cat_one_id': 1, ...}, 'meta': {'msg': '获取成功', 'status': 200}}, ['c4', '根据 ID 查询商品', '{\"Authorization\": \"${token}\"}', 'goods/${goods_id}', 'P2', '\"${token}\"!=\"\";\"${goods_id}\"!=\"\"', ...], <common.db.DB object at 0x000001198F275960>)\n +    where <bound method AssertApi.assert_api of <common.assert_api.AssertApi object at 0x000001198F3B0EE0>> = <common.assert_api.AssertApi object at 0x000001198F3B0EE0>.assert_api\n +      where <common.assert_api.AssertApi object at 0x000001198F3B0EE0> = AssertApi()","statusTrace":"self = <test_caes.test_001.Test object at 0x000001198F277460>\ncase = ['c4', '根据 ID 查询商品', '{\"Authorization\": \"${token}\"}', 'goods/${goods_id}', 'P2', '\"${token}\"!=\"\";\"${goods_id}\"!=\"\"', ...]\nget_db = <common.db.DB object at 0x000001198F275960>\n\n    @pytest.mark.parametrize(\"case\",Sheet)\n    def test_001(self,case,get_db):#,get_db\n        # 需要执行sql查询断言时，参数中添加get_db\n        # 不需要执行sql查询断言时，参数中去掉get_db\n    \n        response=(Api_Request.api_data(case))\n    \n        # 需要执行sql查询断言时，参数中添加get_db\n        # 不需要执行sql查询断言时，参数中去掉get_db\n>       assert AssertApi().assert_api(response,case,get_db)#,get_db\nE       assert False\nE        +  where False = <bound method AssertApi.assert_api of <common.assert_api.AssertApi object at 0x000001198F3B0EE0>>({'data': {'add_time': 1663732454, 'attrs': [{'add_price': None, 'attr_id': 15, 'attr_name': '主观参数-品牌', 'attr_sel': 'only', ...}, {'add_price': None, 'attr_id': 15, 'attr_name': '主观参数-品牌', 'attr_sel': 'only', ...}], 'cat_id': 3, 'cat_one_id': 1, ...}, 'meta': {'msg': '获取成功', 'status': 200}}, ['c4', '根据 ID 查询商品', '{\"Authorization\": \"${token}\"}', 'goods/${goods_id}', 'P2', '\"${token}\"!=\"\";\"${goods_id}\"!=\"\"', ...], <common.db.DB object at 0x000001198F275960>)\nE        +    where <bound method AssertApi.assert_api of <common.assert_api.AssertApi object at 0x000001198F3B0EE0>> = <common.assert_api.AssertApi object at 0x000001198F3B0EE0>.assert_api\nE        +      where <common.assert_api.AssertApi object at 0x000001198F3B0EE0> = AssertApi()\n\ntest_caes\\test_001.py:31: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1663743364168,"stop":1663743364232,"duration":64},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"get_db","time":{"start":1663743364232,"stop":1663743364256,"duration":24},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert False\n +  where False = <bound method AssertApi.assert_api of <common.assert_api.AssertApi object at 0x000001198F3B0EE0>>({'data': {'add_time': 1663732454, 'attrs': [{'add_price': None, 'attr_id': 15, 'attr_name': '主观参数-品牌', 'attr_sel': 'only', ...}, {'add_price': None, 'attr_id': 15, 'attr_name': '主观参数-品牌', 'attr_sel': 'only', ...}], 'cat_id': 3, 'cat_one_id': 1, ...}, 'meta': {'msg': '获取成功', 'status': 200}}, ['c4', '根据 ID 查询商品', '{\"Authorization\": \"${token}\"}', 'goods/${goods_id}', 'P2', '\"${token}\"!=\"\";\"${goods_id}\"!=\"\"', ...], <common.db.DB object at 0x000001198F275960>)\n +    where <bound method AssertApi.assert_api of <common.assert_api.AssertApi object at 0x000001198F3B0EE0>> = <common.assert_api.AssertApi object at 0x000001198F3B0EE0>.assert_api\n +      where <common.assert_api.AssertApi object at 0x000001198F3B0EE0> = AssertApi()","statusTrace":"self = <test_caes.test_001.Test object at 0x000001198F277460>\ncase = ['c4', '根据 ID 查询商品', '{\"Authorization\": \"${token}\"}', 'goods/${goods_id}', 'P2', '\"${token}\"!=\"\";\"${goods_id}\"!=\"\"', ...]\nget_db = <common.db.DB object at 0x000001198F275960>\n\n    @pytest.mark.parametrize(\"case\",Sheet)\n    def test_001(self,case,get_db):#,get_db\n        # 需要执行sql查询断言时，参数中添加get_db\n        # 不需要执行sql查询断言时，参数中去掉get_db\n    \n        response=(Api_Request.api_data(case))\n    \n        # 需要执行sql查询断言时，参数中添加get_db\n        # 不需要执行sql查询断言时，参数中去掉get_db\n>       assert AssertApi().assert_api(response,case,get_db)#,get_db\nE       assert False\nE        +  where False = <bound method AssertApi.assert_api of <common.assert_api.AssertApi object at 0x000001198F3B0EE0>>({'data': {'add_time': 1663732454, 'attrs': [{'add_price': None, 'attr_id': 15, 'attr_name': '主观参数-品牌', 'attr_sel': 'only', ...}, {'add_price': None, 'attr_id': 15, 'attr_name': '主观参数-品牌', 'attr_sel': 'only', ...}], 'cat_id': 3, 'cat_one_id': 1, ...}, 'meta': {'msg': '获取成功', 'status': 200}}, ['c4', '根据 ID 查询商品', '{\"Authorization\": \"${token}\"}', 'goods/${goods_id}', 'P2', '\"${token}\"!=\"\";\"${goods_id}\"!=\"\"', ...], <common.db.DB object at 0x000001198F275960>)\nE        +    where <bound method AssertApi.assert_api of <common.assert_api.AssertApi object at 0x000001198F3B0EE0>> = <common.assert_api.AssertApi object at 0x000001198F3B0EE0>.assert_api\nE        +      where <common.assert_api.AssertApi object at 0x000001198F3B0EE0> = AssertApi()\n\ntest_caes\\test_001.py:31: AssertionError","steps":[{"name":"请求数据：","time":{"start":1663743364420,"stop":1663743364421,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"55d5e626162be301","name":"附件内容","source":"55d5e626162be301.json","type":"application/json","size":392}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":1},{"name":"响应数据：","time":{"start":1663743364441,"stop":1663743364442,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"818d92611acd34af","name":"附件内容","source":"818d92611acd34af.json","type":"application/json","size":1364}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":1},{"name":"提取参数路径：","time":{"start":1663743364442,"stop":1663743364442,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"7fd832b34eab0208","name":"附件内容","source":"7fd832b34eab0208.json","type":"application/json","size":2}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":1},{"name":"参数池数据：","time":{"start":1663743364443,"stop":1663743364444,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"83e3b970fd84ba96","name":"附件内容","source":"83e3b970fd84ba96.json","type":"application/json","size":218}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":1},{"name":"断言：False","time":{"start":1663743364444,"stop":1663743364446,"duration":2},"status":"passed","steps":[],"attachments":[{"uid":"b49297bdcbea76c7","name":"断言：False：","source":"b49297bdcbea76c7.json","type":"application/json","size":96}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":1}],"attachments":[{"uid":"d2119cbc9635ddca","name":"log","source":"d2119cbc9635ddca.txt","type":"text/plain","size":4073}],"parameters":[],"hasContent":true,"stepsCount":5,"shouldDisplayMessage":true,"attachmentsCount":6},"afterStages":[{"name":"get_db::0","time":{"start":1663743365144,"stop":1663743365144,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"story","value":"2-商品测试"},{"name":"severity","value":"critical"},{"name":"parentSuite","value":"test_caes"},{"name":"suite","value":"test_001"},{"name":"subSuite","value":"Test"},{"name":"host","value":"huangpeng"},{"name":"thread","value":"15000-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_caes.test_001"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case","value":"['c4', '根据 ID 查询商品', '{\"Authorization\": \"${token}\"}', 'goods/${goods_id}', 'P2', '\"${token}\"!=\"\";\"${goods_id}\"!=\"\"', 'get', 'params', '', '{}', '', '', '{}', '2-商品测试']"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"5af61697b095aadb.json","parameterValues":["['c4', '根据 ID 查询商品', '{\"Authorization\": \"${token}\"}', 'goods/${goods_id}', 'P2', '\"${token}\"!=\"\";\"${goods_id}\"!=\"\"', 'get', 'params', '', '{}', '', '', '{}', '2-商品测试']"]}